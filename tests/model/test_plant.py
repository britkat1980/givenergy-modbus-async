import datetime
import json
from typing import Any, Dict, Optional, Type

import pytest

from givenergy_modbus.client import Message
from givenergy_modbus.exceptions import ExceptionBase
from givenergy_modbus.model.battery import Battery
from givenergy_modbus.model.inverter import Inverter
from givenergy_modbus.model.plant import Plant
from givenergy_modbus.model.register import HoldingRegister, InputRegister, Register
from givenergy_modbus.model.register_cache import RegisterCache
from givenergy_modbus.pdu import (
    BasePDU,
    HeartbeatRequest,
    NullResponse,
    ReadInputRegistersResponse,
    ReadRegistersResponse,
    WriteHoldingRegisterResponse,
)
from tests.conftest import CLIENT_MESSAGES, PduTestCaseSig


@pytest.fixture
def plant():
    """Yield a Plant."""
    p = Plant()
    yield p


def test_instantiation(plant):
    assert Plant().dict() == {
        'data_adapter_serial_number': '',
        'inverter_serial_number': '',
        'register_caches': {0x32: {}},
    }
    assert Plant().json() == (
        '{"register_caches": {"50": {}}, "inverter_serial_number": "", "data_adapter_serial_number": ""}'
    )
    rc = RegisterCache(registers={HoldingRegister(1): 2})
    assert Plant(inverter_serial_number='AB1234', register_caches={0x30: rc}).dict() == {
        'data_adapter_serial_number': '',
        'inverter_serial_number': 'AB1234',
        'register_caches': {0x30: rc},
    }
    assert Plant(data_adapter_serial_number='ZX9876', register_caches={0x30: rc}).json() == (
        '{"register_caches": {"48": {"HoldingRegister(1)": 2}}, '
        '"inverter_serial_number": "", '
        '"data_adapter_serial_number": "ZX9876"}'
    )


def test_plant(
    plant: Plant,
    register_cache_inverter_daytime_discharging_with_solar_generation,
    register_cache_battery_daytime_discharging,
):
    """Ensure we can instantiate a Plant from existing DTOs."""
    plant.register_caches[0x32] = RegisterCache()
    plant.register_caches[0x32].update_with_validate(register_cache_inverter_daytime_discharging_with_solar_generation)
    plant.register_caches[0x32].update_with_validate(register_cache_battery_daytime_discharging)

    i = Inverter.from_orm(register_cache_inverter_daytime_discharging_with_solar_generation)
    assert i.inverter_serial_number == 'SA1234G567'
    b = Battery.from_orm(register_cache_battery_daytime_discharging)
    assert b.battery_serial_number == 'BG1234G567'

    assert isinstance(plant.inverter, Inverter)
    assert plant.inverter == i
    assert plant.number_batteries == 1
    assert isinstance(plant.batteries[0], Battery)
    assert plant.batteries[0] == b

    assert plant.dict() == {
        'data_adapter_serial_number': '',
        'inverter_serial_number': '',
        'register_caches': plant.register_caches,
    }
    j = plant.json()
    assert len(j) > 5000

    assert Plant(**plant.dict()) == plant
    assert Plant.from_orm(plant) == plant


@pytest.mark.parametrize(PduTestCaseSig, CLIENT_MESSAGES)
async def test_update(
    plant: Plant,
    str_repr: str,
    pdu_class: Type[BasePDU],
    constructor_kwargs: Dict[str, Any],
    mbap_header: bytes,
    inner_frame: bytes,
    ex: Optional[ExceptionBase],
):
    """Ensure we can update a Plant from PDU Response messages."""
    pdu = pdu_class(**constructor_kwargs)
    message = Message(pdu)
    assert plant.register_caches == {0x32: {}}

    plant.update(message)

    d = plant.dict()
    j = plant.json()
    assert d.keys() == {'register_caches', 'inverter_serial_number', 'data_adapter_serial_number'}

    expected_caches_keys = {0x32}
    if isinstance(pdu, (ReadRegistersResponse, WriteHoldingRegisterResponse)):
        expected_caches_keys.add(pdu.slave_address)
    assert set(d['register_caches'].keys()) == expected_caches_keys

    if isinstance(pdu, ReadRegistersResponse):
        register_type: Type[Register]
        if isinstance(pdu, ReadInputRegistersResponse):
            register_type = InputRegister
        else:
            register_type = HoldingRegister
        assert plant.register_caches[pdu.slave_address] == {
            register_type(k): v for k, v in enumerate(pdu.register_values, start=pdu.base_register)
        }
        assert d['register_caches'][pdu.slave_address] == {
            register_type(k): v for k, v in enumerate(pdu.register_values, start=pdu.base_register)
        }
        assert len(j) > 1400
    elif isinstance(pdu, WriteHoldingRegisterResponse):
        assert d['register_caches'][pdu.slave_address] == {pdu.register: pdu.value}
        assert j == ''.join(
            [
                '{"register_caches": {"',
                str(pdu.slave_address),
                '": {"HoldingRegister(',
                str(pdu.register.value),
                ')": ',
                str(pdu.value),
                '}}, ' '"inverter_serial_number": "SA1234G567", ' '"data_adapter_serial_number": "WF1234G567"}',
            ]
        )
    elif isinstance(pdu, (NullResponse, HeartbeatRequest)):
        assert d['register_caches'] == {k: {} for k in expected_caches_keys}
        assert j == json.dumps(
            {
                'register_caches': {k: {} for k in expected_caches_keys},
                'inverter_serial_number': '',
                'data_adapter_serial_number': '',
            }
        )
    else:  # unknown message
        assert False

    assert message.future.done() is False


def test_from_actual():
    """Ensure we can instantiate a plant from actual register values."""
    register_caches = {
        50: RegisterCache(
            registers={
                HoldingRegister(0): 8193,
                HoldingRegister(1): 3,
                HoldingRegister(2): 2098,
                HoldingRegister(3): 513,
                HoldingRegister(4): 0,
                HoldingRegister(5): 50000,
                HoldingRegister(6): 3600,
                HoldingRegister(7): 1,
                HoldingRegister(8): 16967,
                HoldingRegister(9): 12594,
                HoldingRegister(10): 13108,
                HoldingRegister(11): 18229,
                HoldingRegister(12): 13879,
                HoldingRegister(13): 21313,
                HoldingRegister(14): 12594,
                HoldingRegister(15): 13108,
                HoldingRegister(16): 18229,
                HoldingRegister(17): 13879,
                HoldingRegister(18): 3005,
                HoldingRegister(19): 449,
                HoldingRegister(20): 0,
                HoldingRegister(21): 449,
                HoldingRegister(22): 2,
                HoldingRegister(23): 0,
                HoldingRegister(24): 32768,
                HoldingRegister(25): 30235,
                HoldingRegister(26): 6000,
                HoldingRegister(27): 1,
                HoldingRegister(28): 0,
                HoldingRegister(29): 0,
                HoldingRegister(30): 17,
                HoldingRegister(31): 0,
                HoldingRegister(32): 4,
                HoldingRegister(33): 7,
                HoldingRegister(34): 140,
                HoldingRegister(35): 22,
                HoldingRegister(36): 4,
                HoldingRegister(37): 27,
                HoldingRegister(38): 23,
                HoldingRegister(39): 29,
                HoldingRegister(40): 18,
                HoldingRegister(41): 1,
                HoldingRegister(42): 2,
                HoldingRegister(43): 0,
                HoldingRegister(44): 0,
                HoldingRegister(45): 0,
                HoldingRegister(46): 101,
                HoldingRegister(47): 1,
                HoldingRegister(48): 0,
                HoldingRegister(49): 0,
                HoldingRegister(50): 100,
                HoldingRegister(51): 0,
                HoldingRegister(52): 0,
                HoldingRegister(53): 1,
                HoldingRegister(54): 1,
                HoldingRegister(55): 160,
                HoldingRegister(56): 0,
                HoldingRegister(57): 0,
                HoldingRegister(58): 1,
                HoldingRegister(59): 0,
                HoldingRegister(60): 1500,
                HoldingRegister(61): 30,
                HoldingRegister(62): 30,
                HoldingRegister(63): 1840,
                HoldingRegister(64): 2740,
                HoldingRegister(65): 4700,
                HoldingRegister(66): 5198,
                HoldingRegister(67): 126,
                HoldingRegister(68): 27,
                HoldingRegister(69): 24,
                HoldingRegister(70): 28,
                HoldingRegister(71): 1840,
                HoldingRegister(72): 2620,
                HoldingRegister(73): 4745,
                HoldingRegister(74): 5200,
                HoldingRegister(75): 126,
                HoldingRegister(76): 52,
                HoldingRegister(77): 1,
                HoldingRegister(78): 28,
                HoldingRegister(79): 1755,
                HoldingRegister(80): 2837,
                HoldingRegister(81): 4700,
                HoldingRegister(82): 5200,
                HoldingRegister(83): 2740,
                HoldingRegister(84): 0,
                HoldingRegister(85): 0,
                HoldingRegister(86): 0,
                HoldingRegister(87): 0,
                HoldingRegister(88): 0,
                HoldingRegister(89): 0,
                HoldingRegister(90): 0,
                HoldingRegister(91): 0,
                HoldingRegister(92): 0,
                HoldingRegister(93): 0,
                HoldingRegister(94): 30,
                HoldingRegister(95): 430,
                HoldingRegister(96): 1,
                HoldingRegister(97): 4320,
                HoldingRegister(98): 5850,
                HoldingRegister(99): 0,
                HoldingRegister(100): 0,
                HoldingRegister(101): 0,
                HoldingRegister(102): 0,
                HoldingRegister(103): 0,
                HoldingRegister(104): 0,
                HoldingRegister(105): 0,
                HoldingRegister(106): 0,
                HoldingRegister(107): 0,
                HoldingRegister(108): 6,
                HoldingRegister(109): 1,
                HoldingRegister(110): 4,
                HoldingRegister(111): 50,
                HoldingRegister(112): 50,
                HoldingRegister(113): 0,
                HoldingRegister(114): 4,
                HoldingRegister(115): 0,
                HoldingRegister(116): 100,
                HoldingRegister(117): 0,
                HoldingRegister(118): 0,
                HoldingRegister(119): 0,
                HoldingRegister(120): 0,
                HoldingRegister(121): 0,
                HoldingRegister(122): 0,
                HoldingRegister(123): 24,
                HoldingRegister(124): 0,
                HoldingRegister(125): 1,
                HoldingRegister(126): 0,
                HoldingRegister(127): 0,
                HoldingRegister(128): 1,
                HoldingRegister(129): 1,
                HoldingRegister(130): 255,
                HoldingRegister(131): 20000,
                HoldingRegister(132): 255,
                HoldingRegister(133): 20000,
                HoldingRegister(134): 255,
                HoldingRegister(135): 20000,
                HoldingRegister(136): 255,
                HoldingRegister(137): 20000,
                HoldingRegister(138): 2484,
                HoldingRegister(139): 2530,
                HoldingRegister(140): 2116,
                HoldingRegister(141): 2070,
                HoldingRegister(142): 20,
                HoldingRegister(143): 5,
                HoldingRegister(144): 2415,
                HoldingRegister(145): 2300,
                HoldingRegister(146): 0,
                HoldingRegister(147): 0,
                HoldingRegister(148): 0,
                HoldingRegister(149): 0,
                HoldingRegister(150): 0,
                HoldingRegister(151): 0,
                HoldingRegister(152): 0,
                HoldingRegister(153): 0,
                HoldingRegister(154): 0,
                HoldingRegister(155): 0,
                HoldingRegister(156): 0,
                HoldingRegister(157): 0,
                HoldingRegister(158): 0,
                HoldingRegister(159): 0,
                HoldingRegister(160): 0,
                HoldingRegister(161): 0,
                HoldingRegister(162): 0,
                HoldingRegister(163): 0,
                HoldingRegister(164): 0,
                HoldingRegister(165): 0,
                HoldingRegister(166): 0,
                HoldingRegister(167): 0,
                HoldingRegister(168): 0,
                HoldingRegister(169): 0,
                HoldingRegister(170): 0,
                HoldingRegister(171): 0,
                HoldingRegister(172): 0,
                HoldingRegister(173): 0,
                HoldingRegister(174): 0,
                HoldingRegister(175): 0,
                HoldingRegister(176): 0,
                HoldingRegister(177): 0,
                HoldingRegister(178): 0,
                HoldingRegister(179): 0,
                InputRegister(120): 0,
                InputRegister(121): 0,
                InputRegister(122): 0,
                InputRegister(123): 0,
                InputRegister(124): 0,
                InputRegister(125): 0,
                InputRegister(126): 0,
                InputRegister(127): 0,
                InputRegister(128): 0,
                InputRegister(129): 0,
                InputRegister(130): 0,
                InputRegister(131): 0,
                InputRegister(132): 0,
                InputRegister(133): 0,
                InputRegister(134): 0,
                InputRegister(135): 0,
                InputRegister(136): 0,
                InputRegister(137): 0,
                InputRegister(138): 0,
                InputRegister(139): 0,
                InputRegister(140): 0,
                InputRegister(141): 0,
                InputRegister(142): 0,
                InputRegister(143): 0,
                InputRegister(144): 0,
                InputRegister(145): 0,
                InputRegister(146): 0,
                InputRegister(147): 0,
                InputRegister(148): 0,
                InputRegister(149): 0,
                InputRegister(150): 0,
                InputRegister(151): 0,
                InputRegister(152): 0,
                InputRegister(153): 0,
                InputRegister(154): 0,
                InputRegister(155): 0,
                InputRegister(156): 0,
                InputRegister(157): 0,
                InputRegister(158): 0,
                InputRegister(159): 0,
                InputRegister(160): 0,
                InputRegister(161): 0,
                InputRegister(162): 0,
                InputRegister(163): 0,
                InputRegister(164): 0,
                InputRegister(165): 0,
                InputRegister(166): 0,
                InputRegister(167): 0,
                InputRegister(168): 0,
                InputRegister(169): 0,
                InputRegister(170): 0,
                InputRegister(171): 0,
                InputRegister(172): 0,
                InputRegister(173): 0,
                InputRegister(174): 0,
                InputRegister(175): 0,
                InputRegister(176): 0,
                InputRegister(177): 0,
                InputRegister(178): 0,
                InputRegister(179): 0,
                InputRegister(0): 1,
                InputRegister(1): 180,
                InputRegister(2): 178,
                InputRegister(3): 3885,
                InputRegister(4): 0,
                InputRegister(5): 2404,
                InputRegister(6): 0,
                InputRegister(7): 18527,
                InputRegister(8): 0,
                InputRegister(9): 0,
                InputRegister(10): 41,
                InputRegister(11): 0,
                InputRegister(12): 11929,
                InputRegister(13): 5006,
                InputRegister(14): 5,
                InputRegister(15): 2760,
                InputRegister(16): 8160,
                InputRegister(17): 195,
                InputRegister(18): 0,
                InputRegister(19): 159,
                InputRegister(20): 0,
                InputRegister(21): 0,
                InputRegister(22): 1639,
                InputRegister(23): 0,
                InputRegister(24): 921,
                InputRegister(25): 24,
                InputRegister(26): 123,
                InputRegister(27): 0,
                InputRegister(28): 7211,
                InputRegister(29): 0,
                InputRegister(30): 65497,
                InputRegister(31): 0,
                InputRegister(32): 0,
                InputRegister(33): 19783,
                InputRegister(34): 0,
                InputRegister(35): 43,
                InputRegister(36): 57,
                InputRegister(37): 59,
                InputRegister(38): 0,
                InputRegister(39): 0,
                InputRegister(40): 0,
                InputRegister(41): 322,
                InputRegister(42): 745,
                InputRegister(43): 654,
                InputRegister(44): 380,
                InputRegister(45): 0,
                InputRegister(46): 16987,
                InputRegister(47): 0,
                InputRegister(48): 2754,
                InputRegister(49): 1,
                InputRegister(50): 5128,
                InputRegister(51): 2165,
                InputRegister(52): 1075,
                InputRegister(53): 2390,
                InputRegister(54): 5004,
                InputRegister(55): 318,
                InputRegister(56): 190,
                InputRegister(57): 0,
                InputRegister(58): 266,
                InputRegister(59): 57,
                InputRegister(180): 9061,
                InputRegister(181): 9466,
                InputRegister(182): 59,
                InputRegister(183): 57,
                InputRegister(184): 0,
                InputRegister(185): 0,
                InputRegister(186): 0,
                InputRegister(187): 0,
                InputRegister(188): 0,
                InputRegister(189): 0,
                InputRegister(190): 0,
                InputRegister(191): 0,
                InputRegister(192): 0,
                InputRegister(193): 0,
                InputRegister(194): 0,
                InputRegister(195): 0,
                InputRegister(196): 0,
                InputRegister(197): 0,
                InputRegister(198): 0,
                InputRegister(199): 0,
                InputRegister(200): 0,
                InputRegister(201): 0,
                InputRegister(202): 0,
                InputRegister(203): 0,
                InputRegister(204): 0,
                InputRegister(205): 0,
                InputRegister(206): 0,
                InputRegister(207): 0,
                InputRegister(208): 0,
                InputRegister(209): 0,
                InputRegister(210): 0,
                InputRegister(211): 0,
                InputRegister(212): 0,
                InputRegister(213): 0,
                InputRegister(214): 0,
                InputRegister(215): 0,
                InputRegister(216): 0,
                InputRegister(217): 0,
                InputRegister(218): 0,
                InputRegister(219): 0,
                InputRegister(220): 0,
                InputRegister(221): 0,
                InputRegister(222): 0,
                InputRegister(223): 0,
                InputRegister(224): 0,
                InputRegister(225): 0,
                InputRegister(226): 0,
                InputRegister(227): 300,
                InputRegister(228): 0,
                InputRegister(229): 0,
                InputRegister(230): 0,
                InputRegister(231): 0,
                InputRegister(232): 0,
                InputRegister(233): 0,
                InputRegister(234): 0,
                InputRegister(235): 0,
                InputRegister(236): 0,
                InputRegister(237): 0,
                InputRegister(238): 0,
                InputRegister(239): 0,
                InputRegister(60): 3221,
                InputRegister(61): 3224,
                InputRegister(62): 3219,
                InputRegister(63): 3217,
                InputRegister(64): 3217,
                InputRegister(65): 3216,
                InputRegister(66): 3221,
                InputRegister(67): 3217,
                InputRegister(68): 3225,
                InputRegister(69): 3222,
                InputRegister(70): 3221,
                InputRegister(71): 3221,
                InputRegister(72): 3222,
                InputRegister(73): 3229,
                InputRegister(74): 3227,
                InputRegister(75): 3225,
                InputRegister(76): 199,
                InputRegister(77): 186,
                InputRegister(78): 191,
                InputRegister(79): 182,
                InputRegister(80): 51555,
                InputRegister(81): 255,
                InputRegister(82): 0,
                InputRegister(83): 51548,
                InputRegister(84): 0,
                InputRegister(85): 19202,
                InputRegister(86): 0,
                InputRegister(87): 16000,
                InputRegister(88): 0,
                InputRegister(89): 11071,
                InputRegister(90): 0,
                InputRegister(91): 3600,
                InputRegister(92): 256,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 116,
                InputRegister(97): 16,
                InputRegister(98): 3005,
                InputRegister(99): 0,
                InputRegister(100): 58,
                InputRegister(101): 0,
                InputRegister(102): 16000,
                InputRegister(103): 199,
                InputRegister(104): 186,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 16967,
                InputRegister(111): 12594,
                InputRegister(112): 13108,
                InputRegister(113): 18229,
                InputRegister(114): 13879,
                InputRegister(115): 8,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
        51: RegisterCache(
            registers={
                InputRegister(60): 0,
                InputRegister(61): 0,
                InputRegister(62): 0,
                InputRegister(63): 0,
                InputRegister(64): 0,
                InputRegister(65): 0,
                InputRegister(66): 0,
                InputRegister(67): 0,
                InputRegister(68): 0,
                InputRegister(69): 0,
                InputRegister(70): 0,
                InputRegister(71): 0,
                InputRegister(72): 0,
                InputRegister(73): 0,
                InputRegister(74): 0,
                InputRegister(75): 0,
                InputRegister(76): 45,
                InputRegister(77): 0,
                InputRegister(78): 0,
                InputRegister(79): 0,
                InputRegister(80): 0,
                InputRegister(81): 256,
                InputRegister(82): 0,
                InputRegister(83): 0,
                InputRegister(84): 0,
                InputRegister(85): 0,
                InputRegister(86): 0,
                InputRegister(87): 0,
                InputRegister(88): 0,
                InputRegister(89): 0,
                InputRegister(90): 0,
                InputRegister(91): 0,
                InputRegister(92): 0,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 0,
                InputRegister(97): 0,
                InputRegister(98): 0,
                InputRegister(99): 0,
                InputRegister(100): 0,
                InputRegister(101): 0,
                InputRegister(102): 0,
                InputRegister(103): 0,
                InputRegister(104): 0,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 0,
                InputRegister(111): 0,
                InputRegister(112): 0,
                InputRegister(113): 0,
                InputRegister(114): 0,
                InputRegister(115): 0,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
        52: RegisterCache(
            registers={
                InputRegister(60): 0,
                InputRegister(61): 0,
                InputRegister(62): 0,
                InputRegister(63): 0,
                InputRegister(64): 0,
                InputRegister(65): 0,
                InputRegister(66): 0,
                InputRegister(67): 0,
                InputRegister(68): 0,
                InputRegister(69): 0,
                InputRegister(70): 0,
                InputRegister(71): 0,
                InputRegister(72): 0,
                InputRegister(73): 0,
                InputRegister(74): 0,
                InputRegister(75): 0,
                InputRegister(76): 0,
                InputRegister(77): 0,
                InputRegister(78): 0,
                InputRegister(79): 0,
                InputRegister(80): 0,
                InputRegister(81): 0,
                InputRegister(82): 0,
                InputRegister(83): 0,
                InputRegister(84): 0,
                InputRegister(85): 0,
                InputRegister(86): 0,
                InputRegister(87): 0,
                InputRegister(88): 0,
                InputRegister(89): 0,
                InputRegister(90): 0,
                InputRegister(91): 0,
                InputRegister(92): 0,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 0,
                InputRegister(97): 0,
                InputRegister(98): 0,
                InputRegister(99): 0,
                InputRegister(100): 0,
                InputRegister(101): 0,
                InputRegister(102): 0,
                InputRegister(103): 0,
                InputRegister(104): 0,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 0,
                InputRegister(111): 0,
                InputRegister(112): 0,
                InputRegister(113): 0,
                InputRegister(114): 0,
                InputRegister(115): 0,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
        53: RegisterCache(
            registers={
                InputRegister(60): 0,
                InputRegister(61): 0,
                InputRegister(62): 0,
                InputRegister(63): 0,
                InputRegister(64): 0,
                InputRegister(65): 0,
                InputRegister(66): 0,
                InputRegister(67): 0,
                InputRegister(68): 0,
                InputRegister(69): 0,
                InputRegister(70): 0,
                InputRegister(71): 0,
                InputRegister(72): 0,
                InputRegister(73): 0,
                InputRegister(74): 0,
                InputRegister(75): 0,
                InputRegister(76): 0,
                InputRegister(77): 0,
                InputRegister(78): 0,
                InputRegister(79): 0,
                InputRegister(80): 0,
                InputRegister(81): 0,
                InputRegister(82): 0,
                InputRegister(83): 0,
                InputRegister(84): 0,
                InputRegister(85): 0,
                InputRegister(86): 0,
                InputRegister(87): 0,
                InputRegister(88): 0,
                InputRegister(89): 0,
                InputRegister(90): 0,
                InputRegister(91): 0,
                InputRegister(92): 0,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 0,
                InputRegister(97): 0,
                InputRegister(98): 0,
                InputRegister(99): 0,
                InputRegister(100): 0,
                InputRegister(101): 0,
                InputRegister(102): 0,
                InputRegister(103): 0,
                InputRegister(104): 0,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 0,
                InputRegister(111): 0,
                InputRegister(112): 0,
                InputRegister(113): 0,
                InputRegister(114): 0,
                InputRegister(115): 0,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
        54: RegisterCache(
            registers={
                InputRegister(60): 0,
                InputRegister(61): 0,
                InputRegister(62): 0,
                InputRegister(63): 0,
                InputRegister(64): 0,
                InputRegister(65): 0,
                InputRegister(66): 0,
                InputRegister(67): 0,
                InputRegister(68): 0,
                InputRegister(69): 0,
                InputRegister(70): 0,
                InputRegister(71): 0,
                InputRegister(72): 0,
                InputRegister(73): 0,
                InputRegister(74): 0,
                InputRegister(75): 0,
                InputRegister(76): 0,
                InputRegister(77): 0,
                InputRegister(78): 0,
                InputRegister(79): 0,
                InputRegister(80): 0,
                InputRegister(81): 0,
                InputRegister(82): 0,
                InputRegister(83): 0,
                InputRegister(84): 0,
                InputRegister(85): 0,
                InputRegister(86): 0,
                InputRegister(87): 0,
                InputRegister(88): 0,
                InputRegister(89): 0,
                InputRegister(90): 0,
                InputRegister(91): 0,
                InputRegister(92): 0,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 0,
                InputRegister(97): 0,
                InputRegister(98): 0,
                InputRegister(99): 0,
                InputRegister(100): 0,
                InputRegister(101): 0,
                InputRegister(102): 0,
                InputRegister(103): 0,
                InputRegister(104): 0,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 0,
                InputRegister(111): 0,
                InputRegister(112): 0,
                InputRegister(113): 0,
                InputRegister(114): 0,
                InputRegister(115): 0,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
        55: RegisterCache(
            registers={
                InputRegister(60): 0,
                InputRegister(61): 0,
                InputRegister(62): 0,
                InputRegister(63): 0,
                InputRegister(64): 0,
                InputRegister(65): 0,
                InputRegister(66): 0,
                InputRegister(67): 0,
                InputRegister(68): 0,
                InputRegister(69): 0,
                InputRegister(70): 0,
                InputRegister(71): 0,
                InputRegister(72): 0,
                InputRegister(73): 0,
                InputRegister(74): 0,
                InputRegister(75): 0,
                InputRegister(76): 0,
                InputRegister(77): 0,
                InputRegister(78): 0,
                InputRegister(79): 0,
                InputRegister(80): 0,
                InputRegister(81): 0,
                InputRegister(82): 0,
                InputRegister(83): 0,
                InputRegister(84): 0,
                InputRegister(85): 0,
                InputRegister(86): 0,
                InputRegister(87): 0,
                InputRegister(88): 0,
                InputRegister(89): 0,
                InputRegister(90): 0,
                InputRegister(91): 0,
                InputRegister(92): 0,
                InputRegister(93): 0,
                InputRegister(94): 0,
                InputRegister(95): 0,
                InputRegister(96): 0,
                InputRegister(97): 0,
                InputRegister(98): 0,
                InputRegister(99): 0,
                InputRegister(100): 0,
                InputRegister(101): 0,
                InputRegister(102): 0,
                InputRegister(103): 0,
                InputRegister(104): 0,
                InputRegister(105): 0,
                InputRegister(106): 0,
                InputRegister(107): 0,
                InputRegister(108): 0,
                InputRegister(109): 0,
                InputRegister(110): 0,
                InputRegister(111): 0,
                InputRegister(112): 0,
                InputRegister(113): 0,
                InputRegister(114): 0,
                InputRegister(115): 0,
                InputRegister(116): 0,
                InputRegister(117): 0,
                InputRegister(118): 0,
                InputRegister(119): 0,
            }
        ),
    }

    p = Plant(register_caches=register_caches)
    i = p.inverter
    assert i.dict() == {
        'active_power_rate': 100,
        'arm_firmware_version': 449,
        'battery_charge_limit': 50,
        'battery_discharge_limit': 50,
        'battery_discharge_min_power_reserve': 4,
        'battery_low_force_charge_time': 6,
        'battery_nominal_capacity': 160.0,
        'battery_percent': 57,
        'battery_power_mode': 1,
        'battery_soc_reserve': 4,
        'battery_type': 1,
        'battery_voltage_adjust': 0,
        'bms_chip_version': 101,
        'charge_and_discharge_soc': (0, 0),
        'charge_slot_1': (datetime.time(0, 30), datetime.time(4, 30)),
        'charge_slot_2': (datetime.time(0, 0), datetime.time(0, 4)),
        'charge_soc_stop_1': 0,
        'charge_soc_stop_2': 0,
        'charge_status': 5,
        'charge_target_soc': 100,
        'charger_warning_code': 0,
        'ct_adjust': 2,
        'dci_1_i': 0.0,
        'dci_1_time': 0,
        'dci_2_i': 0.0,
        'dci_2_time': 0,
        'dci_fault_value': 0.0,
        'device_type_code': '2001',
        'discharge_slot_1': (datetime.time(0, 0), datetime.time(0, 0)),
        'discharge_slot_2': (datetime.time(0, 0), datetime.time(0, 0)),
        'discharge_soc_stop_1': 0,
        'discharge_soc_stop_2': 0,
        'dsp_firmware_version': 449,
        'e_battery_charge_day': 5.7,
        'e_battery_charge_day_2': 5.7,
        'e_battery_charge_total': 946.6,
        'e_battery_discharge_day': 5.9,
        'e_battery_discharge_day_2': 5.9,
        'e_battery_discharge_total': 906.1,
        'e_battery_throughput_total': 1852.7,
        'e_discharge_year': 0.0,
        'e_grid_in_day': 12.3,
        'e_grid_in_total': 1978.3,
        'e_grid_out_day': 2.4,
        'e_grid_out_total': 163.9,
        'e_inverter_in_day': 4.3,
        'e_inverter_in_total': 721.1,
        'e_inverter_out_day': 38.0,
        'e_inverter_out_total': 1698.7,
        'e_pv1_day': 19.5,
        'e_pv2_day': 15.9,
        'e_pv_total': 1192.9,
        'e_solar_diverter': 0.0,
        'enable_60hz_freq_mode': False,
        'enable_above_6kw_system': False,
        'enable_ammeter': True,
        'enable_auto_judge_battery_type': True,
        'enable_bms_read': True,
        'enable_buzzer': False,
        'enable_charge': True,
        'enable_charge_target': False,
        'enable_discharge': False,
        'enable_drm_rj45_port': True,
        'enable_frequency_derating': True,
        'enable_low_voltage_fault_ride_through': False,
        'enable_spi': True,
        'f_ac1': 50.06,
        'f_ac_fault_value': 0.0,
        'f_ac_high_c': 52.0,
        'f_ac_high_in': 52.0,
        'f_ac_high_in_time': 28,
        'f_ac_high_out': 51.98,
        'f_ac_high_out_time': 28,
        'f_ac_low_c': 47.0,
        'f_ac_low_in': 47.45,
        'f_ac_low_in_time': 1,
        'f_ac_low_out': 47.0,
        'f_ac_low_out_time': 24,
        'f_eps_backup': 50.04,
        'fault_code': 0,
        'frequency_load_limit_rate': 24,
        'gfci_1_i': 0.0,
        'gfci_1_time': 0,
        'gfci_2_i': 0.0,
        'gfci_2_time': 0,
        'gfci_fault_value': 0.0,
        'grid_port_max_power_output': 6000,
        'grid_power_adjust': 0,
        'grid_r_voltage_adjust': 0,
        'grid_s_voltage_adjust': 0,
        'grid_t_voltage_adjust': 0,
        'i_ac1': 0.41,
        'i_battery': 21.65,
        'i_grid_port': 2.66,
        'i_pv1': 0.0,
        'i_pv2': 0.0,
        'inverter_battery_bms_firmware_version': 3005,
        'inverter_battery_serial_number': 'BG1234G567',
        'inverter_countdown': 0,
        'inverter_firmware_version': 'D0.449-A0.449',
        'inverter_modbus_address': 17,
        'inverter_model': 'Hybrid',
        'inverter_module': 198706,
        'inverter_restart_delay_time': 30,
        'inverter_serial_number': 'SA1234G567',
        'inverter_start_time': 30,
        'inverter_state': (0, 1),
        'inverter_status': 1,
        'island_check_continue': 0,
        'iso1': 0,
        'iso2': 0,
        'iso_fault_value': 0.0,
        'local_command_test': False,
        'meter_type': 1,
        'modbus_version': 1.4,
        'num_mppt': 2,
        'num_phases': 1,
        'p_battery': 1075,
        'p_eps_backup': 0,
        'p_grid_apparent': 654,
        'p_grid_out': -39,
        'p_inverter_out': 921,
        'p_load_demand': 745,
        'p_pv1': 0,
        'p_pv2': 0,
        'pf_cmd_memory_state': True,
        'pf_inverter_out': -0.184,
        'pf_limit_lp1_lp': 255,
        'pf_limit_lp1_pf': 1.0,
        'pf_limit_lp2_lp': 255,
        'pf_limit_lp2_pf': 1.0,
        'pf_limit_lp3_lp': 255,
        'pf_limit_lp3_pf': 1.0,
        'pf_limit_lp4_lp': 255,
        'pf_limit_lp4_pf': 1.0,
        'power_factor': -1,
        'power_factor_function_model': 0,
        'pv1_power_adjust': 0,
        'pv1_voltage_adjust': 0,
        'pv2_power_adjust': 0,
        'pv2_voltage_adjust': 0,
        'reactive_power_rate': 0,
        'real_v_f_value': 0.0,
        'remote_bms_restart': False,
        'reverse_115_meter_direct': False,
        'reverse_418_meter_direct': False,
        'safety_time_limit': 0.0,
        'safety_v_f_limit': 0.0,
        'select_arm_chip': False,
        'soc_force_adjust': 0,
        'start_system_auto_test': False,
        'system_mode': 1,
        'system_time': datetime.datetime(2022, 4, 27, 23, 29, 18),
        'temp_battery': 19.0,
        'temp_charger': 31.8,
        'temp_fault_value': 0.0,
        'temp_inverter_heatsink': 32.2,
        'test_treat_time': 0,
        'test_treat_value': 0.0,
        'test_value': 0.0,
        'usb_device_inserted': 2,
        'user_code': 7,
        'v_10_min_protection': 274.0,
        'v_ac1': 240.4,
        'v_ac_fault_value': 0.0,
        'v_ac_high_c': 283.7,
        'v_ac_high_in': 262.0,
        'v_ac_high_in_time': 52,
        'v_ac_high_out': 274.0,
        'v_ac_high_out_time': 27,
        'v_ac_low_c': 175.5,
        'v_ac_low_in': 184.0,
        'v_ac_low_in_time': 126,
        'v_ac_low_out': 184.0,
        'v_ac_low_out_time': 126,
        'v_battery': 51.28,
        'v_battery_over_protection_limit': 58.5,
        'v_battery_under_protection_limit': 43.2,
        'v_eps_backup': 239.0,
        'v_highbrigh_bus': 2760,
        'v_n_bus': 0.0,
        'v_p_bus': 388.5,
        'v_pv1': 18.0,
        'v_pv2': 17.8,
        'v_pv_fault_value': 0.0,
        'v_pv_input_start': 150.0,
        'variable_address': 32768,
        'variable_value': 30235,
        'work_time_total': 2754,
    }

    assert p.number_batteries == 1
    b = p.batteries[0]
    assert b.dict() == {
        'battery_serial_number': 'BG1234G567',
        'bms_firmware_version': 3005,
        'design_capacity': 160.0,
        'design_capacity_2': 160.0,
        'e_charge_total': 0.0,
        'e_discharge_total': 0.0,
        'full_capacity': 192.02,
        'num_cells': 16,
        'num_cycles': 116,
        'remaining_capacity': 110.71,
        'soc': 58,
        'status_1_2': (0, 0),
        'status_3_4': (14, 16),
        'status_5_6': (1, 0),
        'status_7': (0, 0),
        'temp_bms_mos': 25.5,
        'temp_cells_1': 19.9,
        'temp_cells_2': 18.6,
        'temp_cells_3': 19.1,
        'temp_cells_4': 18.2,
        'temp_max': 19.9,
        'temp_min': 18.6,
        'usb_inserted': 8,
        'v_battery_out': 51.548,
        'v_cell_01': 3.221,
        'v_cell_02': 3.224,
        'v_cell_03': 3.219,
        'v_cell_04': 3.217,
        'v_cell_05': 3.217,
        'v_cell_06': 3.216,
        'v_cell_07': 3.221,
        'v_cell_08': 3.217,
        'v_cell_09': 3.225,
        'v_cell_10': 3.222,
        'v_cell_11': 3.221,
        'v_cell_12': 3.221,
        'v_cell_13': 3.222,
        'v_cell_14': 3.229,
        'v_cell_15': 3.227,
        'v_cell_16': 3.225,
        'v_cells_sum': 51.555,
        'warning_1_2': (0, 0),
    }
