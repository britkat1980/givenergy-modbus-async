import datetime

from givenergy_modbus.model.inverter import Inverter, Model

from .test_register_cache import register_cache  # noqa: F401

EXPECTED_INVERTER_DICT = {
    'serial_number': 'SA1234G567',
    'model': Model.Hybrid,
    'device_type_code': '2001',
    'inverter_module': 198706,
    'firmware_version': 'D0.449-A0.449',
    'enable_ammeter': True,
    'num_mppt': 2,
    'num_phases': 1,
    'first_battery_serial_number': 'BG1234G567',
    'first_battery_bms_firmware_version': 3005,
    'charge_and_discharge_soc': (0, 0),
    'dsp_firmware_version': 449,
    'arm_firmware_version': 449,
    'enable_charge_target': True,
    'usb_device_inserted': 2,
    'select_arm_chip': False,
    'p_grid_port_max_output': 6000,
    'battery_power_mode': 1,
    'enable_60hz_freq_mode': False,
    'soc_force_adjust': 0,
    'inverter_modbus_address': 17,
    'charge_slot_1': (datetime.time(0, 30), datetime.time(4, 30)),
    'charge_slot_2': (datetime.time(0, 0), datetime.time(0, 4)),
    'discharge_slot_1': (datetime.time(0, 0), datetime.time(0, 0)),
    'discharge_slot_2': (datetime.time(0, 0), datetime.time(0, 0)),
    'modbus_version': 1.4000000000000001,
    'system_time': datetime.datetime(2022, 1, 1, 23, 57, 19),
    'enable_drm_rj45_port': True,
    'ct_adjust': 2,
    # 'charge_and_discharge_soc': 0,
    # 'bms_version': 101,
    'meter_type': 1,
    'reverse_115_meter_direct': False,
    'reverse_418_meter_direct': False,
    'active_power_rate': 100,
    'reactive_power_rate': 0,
    'power_factor': -1,
    'inverter_state': (0, 1),
    'battery_type': 1,
    'battery_nominal_capacity': 160.0,
    'enable_auto_judge_battery_type': True,
    'enable_discharge': False,
    'v_pv_input_start': 150.0,
    'inverter_start_time': 30,
    'inverter_restart_delay_time': 30,
    'v_ac_low_out': 184.0,
    'v_ac_high_out': 274.0,
    'f_ac_low_out': 47.0,
    'f_ac_high_out': 51.980000000000004,
    'v_ac_low_out_time': datetime.time(1, 26),
    'v_ac_high_out_time': datetime.time(0, 27),
    'f_ac_low_out_time': datetime.time(0, 24),
    'f_ac_high_out_time': datetime.time(0, 28),
    'v_ac_low_in': 184.0,
    'v_ac_high_in': 262.0,
    'f_ac_low_in': 47.45,
    'f_ac_high_in': 52.0,
    'v_ac_low_in_time': datetime.time(1, 26),
    'v_ac_high_in_time': datetime.time(0, 52),
    'f_ac_low_in_time': datetime.time(0, 1),
    'f_ac_high_in_time': datetime.time(0, 28),
    'v_ac_low_c': 175.5,
    'v_ac_high_c': 283.7,
    'f_ac_low_c': 47.0,
    'f_ac_high_c': 52.0,
    'gfci_1_i': 0.0,
    'gfci_1_time': datetime.time(0, 0),
    'gfci_2_i': 0.0,
    'gfci_2_time': datetime.time(0, 0),
    'dci_1_i': 0.0,
    'dci_1_time': datetime.time(0, 0),
    'dci_2_i': 0.0,
    'dci_2_time': datetime.time(0, 0),
    'enable_charge': True,
    'v_battery_under_protection_limit': 43.20,
    'v_battery_over_protection_limit': 58.50,
    'pv1_voltage_adjust': 0,
    'pv2_voltage_adjust': 0,
    'grid_r_voltage_adjust': 0,
    'grid_s_voltage_adjust': 0,
    'grid_t_voltage_adjust': 0,
    'grid_power_adjust': 0,
    'battery_voltage_adjust': 0,
    'pv1_power_adjust': 0,
    'pv2_power_adjust': 0,
    'battery_low_force_charge_time': 6,
    'enable_bms_read': True,
    'battery_soc_reserve': 4,
    'battery_charge_limit': 50,
    'battery_discharge_limit': 50,
    'enable_buzzer': False,
    'island_check_continue': 0,
    'battery_discharge_min_power_reserve': 4,
    'charge_target_soc': 100,
    'charge_soc_stop_2': 0,
    'discharge_soc_stop_2': 0,
    'charge_soc_stop_1': 0,
    'discharge_soc_stop_1': 0,
    'inverter_status': 0,
    'v_pv1': 1.4000000000000001,
    'v_pv2': 1.0,
    'v_p_bus': 7.0,
    'v_n_bus': 0.0,
    'v_ac1': 236.70000000000002,
    'e_battery_throughput': 183.20000000000002,
    'i_pv1': 0.0,
    'i_pv2': 0.0,
    'i_ac1': 0.0,
    'p_pv_total_generating_capacity': 15.9,
    'f_ac1': 49.9,
    'charge_status': 0,
    'v_highbrigh_bus': 12,
    'pf_inverter_output': -0.521,
    'e_pv1_day': 0.4,
    'p_pv1': 0,
    'e_pv2_day': 0.5,
    'p_pv2': 0,
    'e_grid_export_day': 0.6000000000000001,
    'e_solar_diverter': 0.0,
    'p_inverter_output': 0,
    'e_grid_out_day': 0.0,
    'e_grid_in_day': 20.900000000000002,
    'e_inverter_in_total': 94.60000000000001,
    'e_discharge_year': 0.0,
    'p_grid_output': -342,
    'p_eps': 0,
    'e_grid_import_total': 365.3,
    'e_inverter_charge_day': 8.5,
    'e_battery_charge_day': 8.4,
    'e_battery_discharge_day': 8.4,
    'inverter_countdown': 30,
    'fault_code': 0,
    'temp_inverter_heatsink': 22.200000000000003,
    'p_load_demand': 342,
    'p_grid_apparent': 680,
    'e_generated_day': 8.1,
    'e_generated_total': 93.0,
    'work_time_total': 213,
    'system_mode': 1,
    'v_battery': 49.910000000000004,
    'i_battery': 0.0,
    'p_battery': 0,
    'v_eps': 235.60000000000002,
    'f_eps': 49.86,
    'temp_charger': 22.3,
    'temp_battery': 17.0,
    'charger_warning_code': 0,
    'i_grid_port': 2.92,
    'battery_percent': 4,
    'e_battery_discharge_total': 90.60000000000001,
    'e_battery_charge_total': 92.60000000000001,
}


def test_from_orm(register_cache):  # noqa: F811
    """Ensure we can return a dict view of inverter data."""
    assert Inverter.from_orm(register_cache).dict() == EXPECTED_INVERTER_DICT
